table peering;
table kernelcopy;

protocol device {
	scan time 10;
}

# host configuration
#####################

include "bird_host.conf";

# constants
############

define OWNAS = 65052;
define KERNEL_TABLE = ipt_freifunk;

# filter helpers
#################

function is_default()        { return net ~ [ 0.0.0.0/0       ]; }
function is_freifunk()       { return net ~ [ 10.0.0.0/8+     ]; }
function is_dn42()           { return net ~ [ 172.22.0.0/15+  ]; }
function is_chaosvpn()       { return net ~ [ 172.31.0.0/16+  ]; }
function is_self_net()       { return net ~ [ 10.130.0.0/16+  ]; }
function is_self_mesh()      { return net ~ [ 10.130.0.0/20+  ]; }
function is_self_clientvpn() { return net ~ [ 10.130.16.0/24+ ]; }

# static routes
################

protocol static static_mesh {
	table peering;
	route 10.130.0.0/16 reject;
};

protocol static local_mesh {
	route 10.130.0.0/20 via "freifunk-hl";
};

# Mesh-internal routing
########################

protocol rip rip_mesh {
	interface "freifunk-hl";
	preference 10;
	import where is_self_net() && (rip_metric < 16);
	export where !is_default() && !((OWNAS, 1) ~ bgp_community);
};

# Kernel routing tables
########################

protocol kernel {
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
};

protocol kernel {
	table kernelcopy;
	kernel table KERNEL_TABLE;
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_default()  then { krt_prefsrc = OWNIP_PUBLIC; accept; }
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
}

# plumbing
###########

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

protocol pipe {
	peer table peering;
	import all;
	export none;
}

# static routes
################

protocol static unreachable_default {
	preference 0;
	route 0.0.0.0/0 reject;
}

# public IPv4
##############

protocol static local_ip4 {
	table peering;
	route OWNIP_PUBLIC/32 reject;
};

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
	table peering;
	local as OWNAS;
	direct;
	gateway direct;
	next hop self;
	import all;
	export filter { bgp_community.add((OWNAS, 1));
		              if source = RTS_BGP then accept;
		              reject;
	              };
}

include "bird_ibgp.conf";

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
	table peering;
	local as OWNAS;
	import where (is_freifunk() || is_dn42() || is_chaosvpn()) && !is_self_net();
	export all;
};

# ffrheinland ipv4
###################

template bgp bgp_ffrhein {
	table peering;
	local as 201173;
	import all;
	export where net ~ [185.66.193.32/29+];
	next hop self;
}

include "bird_aux.conf";
