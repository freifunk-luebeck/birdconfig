table peering;
table kernelcopy;

protocol device {
  scan time 10;
}

# host configuration
#####################

include "bird6_host.conf";

# constants
############

define OWNAS        = 65052;
define OWNAS_PUBLIC = 201173;
define KERNEL_TABLE = ipt_freifunk;

# filter helpers
#################

function is_default()     { return net ~ [ ::/0                ]; }
function is_global()      { return net ~ [ 2000::/3+           ]; }
function is_ula()         { return net ~ [ fc00::/7{48,64}     ]; }
function is_freifunk()    { return net ~ [ 2001:bf7::/32+      ]; }
function is_self_public() { return net ~ [ 2001:67c:2d50::/48+ ]; }
function is_self_net()    { return net ~ [ fdef:ffc0:3dd7::/48+
                                         , 2001:bf7:110::/44+
                                         , 2001:67c:2d50::/48+
                                         ]; }
function is_self_mesh()   { return net ~ [ fdef:ffc0:3dd7::/64+
                                         , 2001:bf7:110::/64+
                                         , 2001:67c:2d50::/64+
                                         ]; }

# static routes
################

protocol static local_freifunk {
  table peering;
  route fdef:ffc0:3dd7::/48 reject;
  route 2001:bf7:110::/44 reject;
  route 2001:67c:2d50::/48 reject;
}

protocol static local_mesh {
  route fdef:ffc0:3dd7::/64 via "freifunk-hl";
  route 2001:bf7:110::/64 via "freifunk-hl";
  route 2001:67c:2d50::/64 via "freifunk-hl";
}

# Mesh-internal routing
########################

protocol rip rip_mesh {
  interface "freifunk-hl";
  preference 10;
  import where is_self_net();
  export where is_self_net() || is_default() || (!((OWNAS, 1) ~ bgp_community) && is_ula());
}

# Kernel routing tables
########################

protocol kernel {
  scan time 20;
  device routes;
  import none;
  export filter {
    if is_ula()      then { krt_prefsrc = ULA_IP;    accept; }
    if is_self_net() then { krt_prefsrc = PUBLIC_IP; accept; }
    reject;
  };
}

protocol kernel {
  table kernelcopy;
  kernel table KERNEL_TABLE;
  scan time 20;
  device routes;
  import none;
  export all;
}

# plumbing
###########

protocol pipe {
  peer table kernelcopy;
  import none;
  export all;
}

protocol pipe {
  peer table peering;
  import all;
  export none;
}

# static routes
################

protocol static unreachable_default {
  preference 0;
  route ::/0 reject;
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
  table peering;
  local as OWNAS;
  direct;
  gateway direct;
  next hop self;
  import all;
  export filter { bgp_community.add((OWNAS, 1));
                  if source = RTS_BGP then accept;
                  reject;
                };
}

include "bird6_ibgp.conf";

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
  table peering;
  local as OWNAS;
  import keep filtered;
  import where !is_self_net() && (is_ula() || is_freifunk());
  export where is_freifunk() || is_ula() || is_self_net();
}

# public IPv6
##############

template bgp bgp_public {
  table peering;
  local as OWNAS_PUBLIC;
  import where !is_self_net() && is_global();
  export where is_self_public();
  next hop self;
}

include "bird6_aux.conf";
